lincs
=====

Usage: lincs [OPTIONS] COMMAND [ARGS]...

  lincs (Learn and Infer Non-Compensatory Sorting) is a set of tools for
  training and using MCDA models.

Options:
  --help  Show this message and exit.

Commands:
  classification-accuracy  Compute a classification accuracy.
  classify                 Classify alternatives.
  generate                 Generate synthetic data.
  learn                    Learn a model.
  visualize                Make graphs from data.

lincs generate
==============

Usage: lincs generate [OPTIONS] COMMAND [ARGS]...

  Generate synthetic data.

Options:
  --help  Show this message and exit.

Commands:
  classification-domain    Generate a synthetic classification domain.
  classification-model     Generate a synthetic classification model.
  classified-alternatives  Generate synthetic classified alternatives.

lincs generate classification-domain
====================================

Usage: lincs generate classification-domain [OPTIONS] CRITERIA_COUNT
                                            CATEGORIES_COUNT

  Generate a synthetic classification domain.

  The generated domain has CRITERIA_COUNT criteria and CATEGORIES_COUNT
  categories.

Options:
  --output-domain FILENAME     Write generated domain to this file instead of
                               standard output.
  --random-seed INTEGER RANGE  The random seed to use.  [x>=0]
  --help                       Show this message and exit.

lincs generate classification-model
===================================

Usage: lincs generate classification-model [OPTIONS] DOMAIN

  Generate a synthetic classification model.

  DOMAIN is a *classification domain* file describing the domain to generate a
  model for.

Options:
  --output-model FILENAME         Write generated model to this file instead
                                  of standard output.
  --random-seed INTEGER RANGE     The random seed to use.  [x>=0]
  --model-type [mrsort]           The type of classification model to
                                  generate.  [default: mrsort]
  --mrsort.fixed-weights-sum FLOAT RANGE
                                  Make sure weights add up to this pre-
                                  determined value instead of a pseudo-random
                                  one.
                                  
                                  Only valid if:
                                  - '--model-type' is 'mrsort'
                                  
                                     [x>=1.0]
  --help                          Show this message and exit.

lincs generate classified-alternatives
======================================

Usage: lincs generate classified-alternatives [OPTIONS] DOMAIN MODEL
                                              ALTERNATIVES_COUNT

  Generate synthetic classified alternatives.

  DOMAIN is a *classification domain* file describing the domain to generate
  alternatives for. MODEL is a *classification model* file for that domain
  describing the model to use to classify the generated alternatives.

Options:
  --output-classified-alternatives FILENAME
                                  Write generated classified alternatives to
                                  this file instead of standard output.
  --max-imbalance FLOAT RANGE     Ensure that categories are balanced, by
                                  forcing their size to differ from the
                                  perfectly balanced size by at most this
                                  fraction.  [0.0<=x<1.0]
  --random-seed INTEGER RANGE     The random seed to use.  [x>=0]
  --help                          Show this message and exit.

lincs visualize
===============

Usage: lincs visualize [OPTIONS] COMMAND [ARGS]...

  Make graphs from data.

Options:
  --help  Show this message and exit.

Commands:
  classification-model  Visualize a classification model.

lincs visualize classification-model
====================================

Usage: lincs visualize classification-model [OPTIONS] DOMAIN MODEL OUTPUT

  Visualize a classification model.

  DOMAIN is a *classification domain* file. MODEL is a *classification model*
  file for that domain describing the model to visualize. The generated image
  is written to the OUTPUT file in PNG format.

Options:
  --alternatives FILENAME       Add the alternatives from this *classified
                                alternatives* file to the visualization.
  --alternatives-count INTEGER  Add only this number of alternatives.
  --help                        Show this message and exit.

lincs learn
===========

Usage: lincs learn [OPTIONS] COMMAND [ARGS]...

  Learn a model.

Options:
  --help  Show this message and exit.

Commands:
  classification-model  Learn a classification model.

lincs learn classification-model
================================

Usage: lincs learn classification-model [OPTIONS] DOMAIN LEARNING_SET

  Learn a classification model.

  DOMAIN is a *classification domain* file describing the domain to learn a
  model for. LEARNING_SET is a *classified alternatives* file for that domain.
  It's used as a source of truth to learn the model.

Options:
  --output-model FILENAME         Write the learned classification model to
                                  this file instead of standard output.
  --model-type [mrsort]           The type of classification model to learn.
                                  [default: mrsort]
  --mrsort.strategy [weights-profiles-breed]
                                  The top-level strategy to use to learn the
                                  MRSort model. See (@todo Add link to doc)
                                  for details about the available strategies.
                                  
                                  Only valid if:
                                  - '--model-type' is 'mrsort'
                                  
                                     [default: weights-profiles-breed]
  --mrsort.weights-profiles-breed.target-accuracy FLOAT RANGE
                                  The target accuracy to reach on the learning
                                  set.
                                  
                                  Only valid if:
                                  - '--model-type' is 'mrsort'
                                  - '--mrsort.strategy' is 'weights-profiles-breed'
                                  
                                     [default: 1.0; 0.0<=x<=1.0]
  --mrsort.weights-profiles-breed.max-iterations INTEGER RANGE
                                  The maximum number of iterations to use to
                                  learn the MRSort model.
                                  
                                  Only valid if:
                                  - '--model-type' is 'mrsort'
                                  - '--mrsort.strategy' is 'weights-profiles-breed'
                                  
                                     [x>=1]
  --mrsort.weights-profiles-breed.models-count INTEGER RANGE
                                  The number of temporary MRSort models to
                                  train. The result of the learning will be
                                  the most accurate of those models.
                                  
                                  Only valid if:
                                  - '--model-type' is 'mrsort'
                                  - '--mrsort.strategy' is 'weights-profiles-breed'
                                  
                                     [default: 9; x>=1]
  --mrsort.weights-profiles-breed.initialization-strategy [maximize-discrimination-per-criterion]
                                  The strategy to use to initialize the MRSort
                                  models. See (@todo Add link to doc) for
                                  details about the available strategies.
                                  
                                  Only valid if:
                                  - '--model-type' is 'mrsort'
                                  - '--mrsort.strategy' is 'weights-profiles-breed'
                                  
                                     [default: maximize-discrimination-per-
                                     criterion]
  --mrsort.weights-profiles-breed.weights-strategy [linear-program]
                                  The strategy to use to improve the weights
                                  of the MRSort models. See (@todo Add link to
                                  doc) for details about the available
                                  strategies.
                                  
                                  Only valid if:
                                  - '--model-type' is 'mrsort'
                                  - '--mrsort.strategy' is 'weights-profiles-breed'
                                  
                                     [default: linear-program]
  --mrsort.weights-profiles-breed.linear-program.solver [glop]
                                  The solver to use to solve the linear
                                  programs. See (@todo Add link to doc) for
                                  details of available solvers.
                                  
                                  Only valid if:
                                  - '--model-type' is 'mrsort'
                                  - '--mrsort.strategy' is 'weights-profiles-breed'
                                  - '--mrsort.weights-profiles-breed.weights-strategy' is 'linear-program'
                                  
                                     [default: glop]
  --mrsort.weights-profiles-breed.profiles-strategy [accuracy-heuristic]
                                  The strategy to use to improve the profiles
                                  of the MRSort models. See (@todo Add link to
                                  doc) for details about the available
                                  strategies.
                                  
                                  Only valid if:
                                  - '--model-type' is 'mrsort'
                                  - '--mrsort.strategy' is 'weights-profiles-breed'
                                  
                                     [default: accuracy-heuristic]
  --mrsort.weights-profiles-breed.accuracy-heuristic.random-seed INTEGER RANGE
                                  The random seed to use for this heuristic.
                                  
                                  Only valid if:
                                  - '--model-type' is 'mrsort'
                                  - '--mrsort.strategy' is 'weights-profiles-breed'
                                  - '--mrsort.weights-profiles-breed.profiles-strategy' is 'accuracy-heuristic'
                                  
                                     [x>=0]
  --mrsort.weights-profiles-breed.accuracy-heuristic.processor [cpu]
                                  The processor to use to improve the profiles
                                  of the MRSort models.
                                  
                                  Only valid if:
                                  - '--model-type' is 'mrsort'
                                  - '--mrsort.strategy' is 'weights-profiles-breed'
                                  - '--mrsort.weights-profiles-breed.profiles-strategy' is 'accuracy-heuristic'
                                  
                                     [default: cpu]
  --mrsort.weights-profiles-breed.breed-strategy [reinitialize-least-accurate]
                                  The strategy to use to breed the MRSort
                                  models. See (@todo Add link to doc) for
                                  details about the available strategies.
                                  
                                  Only valid if:
                                  - '--model-type' is 'mrsort'
                                  - '--mrsort.strategy' is 'weights-profiles-breed'
                                  
                                     [default: reinitialize-least-accurate]
  --mrsort.weights-profiles-breed.reinitialize-least-accurate.portion FLOAT RANGE
                                  The portion of the least accurate MRSort
                                  models to reinitialize.
                                  
                                  Only valid if:
                                  - '--model-type' is 'mrsort'
                                  - '--mrsort.strategy' is 'weights-profiles-breed'
                                  - '--mrsort.weights-profiles-breed.breed-strategy' is 'reinitialize-least-accurate'
                                  
                                     [default: 0.5; 0.0<=x<=1.0]
  --help                          Show this message and exit.

lincs classify
==============

Usage: lincs classify [OPTIONS] DOMAIN MODEL ALTERNATIVES

  Classify alternatives.

  DOMAIN is a *classification domain* file. MODEL is a *classification model*
  file for that domain. ALTERNATIVES is an *unclassified alternatives* file
  for that domain.

Options:
  --output-classified-alternatives FILENAME
                                  Write classified alternatives to this file
                                  instead of standard output.
  --help                          Show this message and exit.

lincs classification-accuracy
=============================

Usage: lincs classification-accuracy [OPTIONS] DOMAIN MODEL TESTING_SET

  Compute a classification accuracy.

  DOMAIN is a *classification domain* file. MODEL is a *classification model*
  file for that domain. TESTING_SET is a *classified alternatives* file for
  that domain.

  The classification accuracy is written to standard output as an integer
  between 0 and the number of alternatives.

Options:
  --help  Show this message and exit.

lincs.Alternative
=================

__init__
--------


__init__( (object)arg1, (str)name, (floats_vector)profile [, (object)category=None]) -> None :

    C++ signature :
        void __init__(_object*,std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >,std::vector<float, std::allocator<float> > [,std::optional<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >=None])

category
--------

name
----

profile
-------

lincs.Alternatives
==================

__init__
--------


__init__( (object)arg1, (Domain)arg2, (alternatives_vector)arg3) -> None :

    C++ signature :
        void __init__(_object*,lincs::Domain,std::vector<lincs::Alternative, std::allocator<lincs::Alternative> >)

alternatives
------------

dump
----


dump( (Alternatives)self, (object)out) -> None :
    Dump the set of alternatives to the provided `.write()`-supporting file-like object, in CSV format.

    C++ signature :
        void dump(lincs::Alternatives,boost::python::api::object {lvalue})

lincs.Boundary
==============

__init__
--------


__init__( (object)arg1, (floats_vector)arg2, (SufficientCoalitions)arg3) -> None :

    C++ signature :
        void __init__(_object*,std::vector<float, std::allocator<float> >,lincs::Model::SufficientCoalitions)

profile
-------

sufficient_coalitions
---------------------

lincs.Category
==============

__init__
--------


__init__( (object)arg1, (str)arg2) -> None :

    C++ signature :
        void __init__(_object*,std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >)

name
----

lincs.CategoryCorrelation
=========================

__init__
--------

Initialize self.  See help(type(self)) for accurate signature.

growing
-------

lincs.Criterion
===============

__init__
--------


__init__( (object)arg1, (str)arg2, (ValueType)arg3, (CategoryCorrelation)arg4) -> None :

    C++ signature :
        void __init__(_object*,std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >,lincs::Domain::Criterion::ValueType,lincs::Domain::Criterion::CategoryCorrelation)

category_correlation
--------------------

name
----

value_type
----------

lincs.Domain
============

__init__
--------


__init__( (object)arg1, (criteria_vector)arg2, (categories_vector)arg3) -> None :

    C++ signature :
        void __init__(_object*,std::vector<lincs::Domain::Criterion, std::allocator<lincs::Domain::Criterion> >,std::vector<lincs::Domain::Category, std::allocator<lincs::Domain::Category> >)

categories
----------

criteria
--------

dump
----


dump( (Domain)self, (object)out) -> None :
    Dump the domain to the provided `.write()`-supporting file-like object, in YAML format.

    C++ signature :
        void dump(lincs::Domain,boost::python::api::object {lvalue})

lincs.ImproveProfilesWithAccuracyHeuristic
==========================================

__init__
--------


__init__( (object)arg1, (Models)arg2) -> None :

    C++ signature :
        void __init__(_object*,lincs::WeightsProfilesBreedMrSortLearning::Models {lvalue})

improve_profiles
----------------


improve_profiles( (ImproveProfilesWithAccuracyHeuristic)arg1) -> None :

    C++ signature :
        void improve_profiles(lincs::ImproveProfilesWithAccuracyHeuristic {lvalue})

lincs.InitializeProfilesForProbabilisticMaximalDiscriminationPowerPerCriterion
==============================================================================

__init__
--------


__init__( (object)arg1, (Models)arg2) -> None :

    C++ signature :
        void __init__(_object*,lincs::WeightsProfilesBreedMrSortLearning::Models {lvalue})

initialize_profiles
-------------------


initialize_profiles( (InitializeProfilesForProbabilisticMaximalDiscriminationPowerPerCriterion)arg1, (object)arg2, (object)arg3) -> None :

    C++ signature :
        void initialize_profiles(lincs::InitializeProfilesForProbabilisticMaximalDiscriminationPowerPerCriterion {lvalue},__gnu_cxx::__normal_iterator<unsigned int const*, std::vector<unsigned int, std::allocator<unsigned int> > >,__gnu_cxx::__normal_iterator<unsigned int const*, std::vector<unsigned int, std::allocator<unsigned int> > >)

lincs.Model
===========

__init__
--------


__init__( (object)arg1, (Domain)arg2, (boundaries_vector)arg3) -> None :

    C++ signature :
        void __init__(_object*,lincs::Domain,std::vector<lincs::Model::Boundary, std::allocator<lincs::Model::Boundary> >)

boundaries
----------

dump
----


dump( (Model)self, (object)out) -> None :
    Dump the model to the provided `.write()`-supporting file-like object, in YAML format.

    C++ signature :
        void dump(lincs::Model,boost::python::api::object {lvalue})

lincs.OptimizeWeightsUsingGlop
==============================

__init__
--------


__init__( (object)arg1, (Models)arg2) -> None :

    C++ signature :
        void __init__(_object*,lincs::WeightsProfilesBreedMrSortLearning::Models {lvalue})

optimize_weights
----------------


optimize_weights( (OptimizeWeightsUsingGlop)arg1) -> None :

    C++ signature :
        void optimize_weights(lincs::OptimizeWeightsUsingGlop {lvalue})

lincs.ProfilesImprovementStrategy
=================================

__init__
--------

Raises an exception
This class cannot be instantiated from Python


improve_profiles
----------------


improve_profiles( (ProfilesImprovementStrategy)arg1) -> None :

    C++ signature :
        void improve_profiles(lincs::WeightsProfilesBreedMrSortLearning::ProfilesImprovementStrategy {lvalue})

improve_profiles( (ProfilesImprovementStrategy)arg1) -> None :

    C++ signature :
        void improve_profiles(lincs::WeightsProfilesBreedMrSortLearning::ProfilesImprovementStrategy {lvalue})

lincs.ProfilesInitializationStrategy
====================================

__init__
--------

Raises an exception
This class cannot be instantiated from Python


initialize_profiles
-------------------


initialize_profiles( (ProfilesInitializationStrategy)arg1, (object)arg2, (object)arg3) -> None :

    C++ signature :
        void initialize_profiles(lincs::WeightsProfilesBreedMrSortLearning::ProfilesInitializationStrategy {lvalue},__gnu_cxx::__normal_iterator<unsigned int const*, std::vector<unsigned int, std::allocator<unsigned int> > >,__gnu_cxx::__normal_iterator<unsigned int const*, std::vector<unsigned int, std::allocator<unsigned int> > >)

initialize_profiles( (ProfilesInitializationStrategy)arg1, (object)arg2, (object)arg3) -> None :

    C++ signature :
        void initialize_profiles(lincs::WeightsProfilesBreedMrSortLearning::ProfilesInitializationStrategy {lvalue},__gnu_cxx::__normal_iterator<unsigned int const*, std::vector<unsigned int, std::allocator<unsigned int> > >,__gnu_cxx::__normal_iterator<unsigned int const*, std::vector<unsigned int, std::allocator<unsigned int> > >)

lincs.SufficientCoalitions
==========================

__init__
--------


__init__( (object)arg1, (SufficientCoalitionsKind)arg2, (floats_vector)arg3) -> None :

    C++ signature :
        void __init__(_object*,lincs::Model::SufficientCoalitions::Kind,std::vector<float, std::allocator<float> >)

criterion_weights
-----------------

kind
----

lincs.SufficientCoalitionsKind
==============================

__init__
--------

Initialize self.  See help(type(self)) for accurate signature.

weights
-------

lincs.TerminateAtAccuracy
=========================

__init__
--------


__init__( (object)arg1, (int)arg2) -> None :

    C++ signature :
        void __init__(_object*,unsigned int)

terminate
---------


terminate( (TerminateAtAccuracy)arg1, (int)arg2, (int)arg3) -> bool :

    C++ signature :
        bool terminate(lincs::TerminateAtAccuracy {lvalue},unsigned int,unsigned int)

lincs.TerminationStrategy
=========================

__init__
--------


__init__( (object)arg1) -> None :

    C++ signature :
        void __init__(_object*)

terminate
---------


terminate( (TerminationStrategy)arg1, (int)arg2, (int)arg3) -> bool :

    C++ signature :
        bool terminate(lincs::WeightsProfilesBreedMrSortLearning::TerminationStrategy {lvalue},unsigned int,unsigned int)

terminate( (TerminationStrategy)arg1, (int)arg2, (int)arg3) -> None :

    C++ signature :
        void terminate(init_module_liblincs()::TerminationStrategyWrap {lvalue},unsigned int,unsigned int)

lincs.ValueType
===============

__init__
--------

Initialize self.  See help(type(self)) for accurate signature.

real
----

lincs.WeightsOptimizationStrategy
=================================

__init__
--------

Raises an exception
This class cannot be instantiated from Python


optimize_weights
----------------


optimize_weights( (WeightsOptimizationStrategy)arg1) -> None :

    C++ signature :
        void optimize_weights(lincs::WeightsProfilesBreedMrSortLearning::WeightsOptimizationStrategy {lvalue})

optimize_weights( (WeightsOptimizationStrategy)arg1) -> None :

    C++ signature :
        void optimize_weights(lincs::WeightsProfilesBreedMrSortLearning::WeightsOptimizationStrategy {lvalue})

lincs.WeightsProfilesBreedMrSortLearning
========================================

__init__
--------


__init__( (object)arg1, (Models)arg2, (ProfilesInitializationStrategy)arg3, (WeightsOptimizationStrategy)arg4, (ProfilesImprovementStrategy)arg5, (TerminationStrategy)arg6) -> None :

    C++ signature :
        void __init__(_object*,lincs::WeightsProfilesBreedMrSortLearning::Models {lvalue},lincs::WeightsProfilesBreedMrSortLearning::ProfilesInitializationStrategy {lvalue},lincs::WeightsProfilesBreedMrSortLearning::WeightsOptimizationStrategy {lvalue},lincs::WeightsProfilesBreedMrSortLearning::ProfilesImprovementStrategy {lvalue},lincs::WeightsProfilesBreedMrSortLearning::TerminationStrategy {lvalue})

perform
-------


perform( (WeightsProfilesBreedMrSortLearning)arg1) -> Model :

    C++ signature :
        lincs::Model perform(lincs::WeightsProfilesBreedMrSortLearning {lvalue})

lincs.classify_alternatives
===========================


classify_alternatives( (Domain)domain, (Model)model, (Alternatives)alternatives) -> ClassificationResult :
    Classify the provided `alternatives` according to the provided `model`.

    C++ signature :
        lincs::ClassificationResult classify_alternatives(lincs::Domain,lincs::Model,lincs::Alternatives*)

lincs.command_line_interface
============================

lincs.generate_alternatives
===========================


generate_alternatives( (Domain)domain, (Model)model, (int)alternatives_count, (int)random_seed [, (object)max_imbalance=None]) -> Alternatives :
    Generate a set of `alternatives_count` pseudo-random alternatives for the provided `domain`, classified according to the provided `model`.

    C++ signature :
        lincs::Alternatives generate_alternatives(lincs::Domain,lincs::Model,unsigned int,unsigned int [,std::optional<float>=None])

lincs.generate_domain
=====================


generate_domain( (int)criteria_count, (int)categories_count, (int)random_seed) -> Domain :
    Generate a domain with `criteria_count` criteria and `categories_count` categories.

    C++ signature :
        lincs::Domain generate_domain(unsigned int,unsigned int,unsigned int)

lincs.generate_mrsort_model
===========================


generate_mrsort_model( (Domain)domain, (int)random_seed [, (object)fixed_weights_sum=None]) -> Model :
    Generate an MR-Sort model for the provided `domain`.

    C++ signature :
        lincs::Model generate_mrsort_model(lincs::Domain,unsigned int [,std::optional<float>=None])

lincs.load_alternatives
=======================


load_alternatives( (Domain)domain, (object)in) -> Alternatives :
    Load a set of alternatives (classified or not) from the provided `.read()`-supporting file-like object, in CSV format.

    C++ signature :
        lincs::Alternatives load_alternatives(lincs::Domain,boost::python::api::object {lvalue})

lincs.load_domain
=================


load_domain( (object)in) -> Domain :
    Load a domain from the provided `.read()`-supporting file-like object, in YAML format.

    C++ signature :
        lincs::Domain load_domain(boost::python::api::object {lvalue})

lincs.load_model
================


load_model( (Domain)domain, (object)in) -> Model :
    Load a model for the provided `domain`, from the provided `.read()`-supporting file-like object, in YAML format.

    C++ signature :
        lincs::Model load_model(lincs::Domain,boost::python::api::object {lvalue})

lincs.make_models
=================


make_models( (Domain)arg1, (Alternatives)arg2, (int)arg3, (int)arg4) -> Models :

    C++ signature :
        lincs::WeightsProfilesBreedMrSortLearning::Models* make_models(lincs::Domain,lincs::Alternatives,unsigned int,unsigned int)

lincs.visualization
===================

