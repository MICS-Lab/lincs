lincs
=====

Usage: lincs [OPTIONS] COMMAND [ARGS]...

  lincs (Learn and Infer Non-Compensatory Sorting) is a set of tools for
  training and using MCDA models.

Options:
  --version  Show the version and exit.
  --help     Show this message and exit.

Commands:
  classification-accuracy  Compute a classification accuracy.
  classify                 Classify alternatives.
  generate                 Generate synthetic data.
  info                     Get information about lincs itself.
  learn                    Learn a model.
  visualize                Make graphs from data.

lincs info
==========

Usage: lincs info [OPTIONS] COMMAND [ARGS]...

  Get information about lincs itself.

Options:
  --help  Show this message and exit.

Commands:
  has-gpu  Check whether lincs was compiled with CUDA support.

lincs info has-gpu
==================

Usage: lincs info has-gpu [OPTIONS]

  Check whether lincs was compiled with CUDA support. Return code is 0 if CUDA
  is supported, 1 otherwise.

Options:
  --quiet  Don't print anything, just return the exit code.
  --help   Show this message and exit.

lincs generate
==============

Usage: lincs generate [OPTIONS] COMMAND [ARGS]...

  Generate synthetic data.

Options:
  --help  Show this message and exit.

Commands:
  classification-model     Generate a synthetic classification model.
  classification-problem   Generate a synthetic classification problem.
  classified-alternatives  Generate synthetic classified alternatives.

lincs generate classification-problem
=====================================

Usage: lincs generate classification-problem [OPTIONS] CRITERIA_COUNT
                                             CATEGORIES_COUNT

  Generate a synthetic classification problem.

  The generated problem has CRITERIA_COUNT criteria and CATEGORIES_COUNT
  categories.

Options:
  --denormalized-min-max       Generate criteria with random denormalized min
                               and max values. (By default, min and max value
                               are 0 and 1)
  --allow-decreasing-criteria  Allow criteria to have decreasing correlation
                               to categories. (By default, all criteria have
                               growing correlation)
  --output-problem FILENAME    Write generated problem to this file instead of
                               standard output.
  --random-seed INTEGER RANGE  The random seed to use.  [x>=0]
  --help                       Show this message and exit.

lincs generate classification-model
===================================

Usage: lincs generate classification-model [OPTIONS] PROBLEM

  Generate a synthetic classification model.

  PROBLEM is a *classification problem* file describing the problem to
  generate a model for.

Options:
  --output-model FILENAME         Write generated model to this file instead
                                  of standard output.
  --random-seed INTEGER RANGE     The random seed to use.  [x>=0]
  --model-type [mrsort]           The type of classification model to
                                  generate.  [default: mrsort]
  --mrsort.fixed-weights-sum FLOAT RANGE
                                  Make sure weights add up to this pre-
                                  determined value instead of a pseudo-random
                                  one.
                                  
                                  Only valid if:
                                  - '--model-type' is 'mrsort'
                                  
                                     [x>=1.0]
  --help                          Show this message and exit.

lincs generate classified-alternatives
======================================

Usage: lincs generate classified-alternatives [OPTIONS] PROBLEM MODEL
                                              ALTERNATIVES_COUNT

  Generate synthetic classified alternatives.

  PROBLEM is a *classification problem* file describing the problem to
  generate alternatives for. MODEL is a *classification model* file for that
  problem describing the model to use to classify the generated alternatives.

Options:
  --output-classified-alternatives FILENAME
                                  Write generated classified alternatives to
                                  this file instead of standard output.
  --max-imbalance FLOAT RANGE     Ensure that categories are balanced, by
                                  forcing their size to differ from the
                                  perfectly balanced size by at most this
                                  fraction.  [0.0<=x<1.0]
  --misclassified-count INTEGER RANGE
                                  Misclassify that many alternatives.  [x>=0]
  --random-seed INTEGER RANGE     The random seed to use.  [x>=0]
  --help                          Show this message and exit.

lincs visualize
===============

Usage: lincs visualize [OPTIONS] COMMAND [ARGS]...

  Make graphs from data.

Options:
  --help  Show this message and exit.

Commands:
  classification-model  Visualize a classification model.

lincs visualize classification-model
====================================

Usage: lincs visualize classification-model [OPTIONS] PROBLEM MODEL OUTPUT

  Visualize a classification model.

  PROBLEM is a *classification problem* file. MODEL is a *classification
  model* file for that problem describing the model to visualize. The
  generated image is written to the OUTPUT file in PNG format.

Options:
  --alternatives FILENAME       Add the alternatives from this *classified
                                alternatives* file to the visualization.
  --alternatives-count INTEGER  Add only this number of alternatives.
  --help                        Show this message and exit.

lincs learn
===========

Usage: lincs learn [OPTIONS] COMMAND [ARGS]...

  Learn a model.

Options:
  --help  Show this message and exit.

Commands:
  classification-model  Learn a classification model.

lincs learn classification-model
================================

Usage: lincs learn classification-model [OPTIONS] PROBLEM LEARNING_SET

  Learn a classification model.

  PROBLEM is a *classification problem* file describing the problem to learn a
  model for. LEARNING_SET is a *classified alternatives* file for that
  problem. It's used as a source of truth to learn the model.

  If you use the --mrsort.weights-profiles-breed strategy, you SHOULD specify
  at least one termination strategy, e.g. --mrsort.weights-profiles-breed.max-
  duration.

Options:
  --output-model FILENAME         Write the learned classification model to
                                  this file instead of standard output.
  --model-type [mrsort|ucncs]     The type of classification model to learn.
                                  [default: mrsort]
  --ucncs.approach [sat-by-coalitions|sat-by-separation|max-sat-by-coalitions|max-sat-by-separation]
                                  The general approach to transform the
                                  learning problem into a satisfiability
                                  problem.
                                  
                                  Only valid if:
                                  - '--model-type' is 'ucncs'
                                  
                                     [default: sat-by-coalitions]
  --mrsort.strategy [weights-profiles-breed]
                                  The top-level strategy to use to learn the
                                  MRSort model. See https://mics-
                                  lab.github.io/lincs/user-
                                  guide.html#learning-strategies about
                                  strategies.
                                  
                                  Only valid if:
                                  - '--model-type' is 'mrsort'
                                  
                                     [default: weights-profiles-breed]
  --mrsort.weights-profiles-breed.target-accuracy FLOAT RANGE
                                  The target accuracy to reach on the learning
                                  set.
                                  
                                  Only valid if:
                                  - '--model-type' is 'mrsort'
                                  - '--mrsort.strategy' is 'weights-profiles-breed'
                                  
                                     [default: 1.0; 0.0<=x<=1.0]
  --mrsort.weights-profiles-breed.max-iterations INTEGER RANGE
                                  The maximum number of iterations to use to
                                  learn the MRSort model.
                                  
                                  Only valid if:
                                  - '--model-type' is 'mrsort'
                                  - '--mrsort.strategy' is 'weights-profiles-breed'
                                  
                                     [x>=1]
  --mrsort.weights-profiles-breed.max-iterations-without-progress INTEGER RANGE
                                  The maximum number of iterations to try
                                  learning the MRSort model without
                                  progressing before giving up.
                                  
                                  Only valid if:
                                  - '--model-type' is 'mrsort'
                                  - '--mrsort.strategy' is 'weights-profiles-breed'
                                  
                                     [x>=1]
  --mrsort.weights-profiles-breed.max-duration FLOAT RANGE
                                  The maximum duration to learn the MRSort
                                  model, in seconds.
                                  
                                  Only valid if:
                                  - '--model-type' is 'mrsort'
                                  - '--mrsort.strategy' is 'weights-profiles-breed'
                                  
                                     [x>=0]
  --mrsort.weights-profiles-breed.max-duration-without-progress FLOAT RANGE
                                  The maximum duration to try learning the
                                  MRSort model without progressing before
                                  giving up, in seconds.
                                  
                                  Only valid if:
                                  - '--model-type' is 'mrsort'
                                  - '--mrsort.strategy' is 'weights-profiles-breed'
                                  
                                     [x>=0]
  --mrsort.weights-profiles-breed.models-count INTEGER RANGE
                                  The number of temporary MRSort models to
                                  train. The result of the learning will be
                                  the most accurate of those models.
                                  
                                  Only valid if:
                                  - '--model-type' is 'mrsort'
                                  - '--mrsort.strategy' is 'weights-profiles-breed'
                                  
                                     [default: 9; x>=1]
  --mrsort.weights-profiles-breed.initialization-strategy [maximize-discrimination-per-criterion]
                                  The strategy to use to initialize the MRSort
                                  models.
                                  
                                  Only valid if:
                                  - '--model-type' is 'mrsort'
                                  - '--mrsort.strategy' is 'weights-profiles-breed'
                                  
                                     [default: maximize-discrimination-per-
                                     criterion]
  --mrsort.weights-profiles-breed.weights-strategy [linear-program]
                                  The strategy to use to improve the weights
                                  of the MRSort models.
                                  
                                  Only valid if:
                                  - '--model-type' is 'mrsort'
                                  - '--mrsort.strategy' is 'weights-profiles-breed'
                                  
                                     [default: linear-program]
  --mrsort.weights-profiles-breed.linear-program.solver [glop|alglib]
                                  The solver to use to solve the linear
                                  programs.
                                  
                                  Only valid if:
                                  - '--model-type' is 'mrsort'
                                  - '--mrsort.strategy' is 'weights-profiles-breed'
                                  - '--mrsort.weights-profiles-breed.weights-strategy' is 'linear-program'
                                  
                                     [default: glop]
  --mrsort.weights-profiles-breed.profiles-strategy [accuracy-heuristic]
                                  The strategy to use to improve the profiles
                                  of the MRSort models.
                                  
                                  Only valid if:
                                  - '--model-type' is 'mrsort'
                                  - '--mrsort.strategy' is 'weights-profiles-breed'
                                  
                                     [default: accuracy-heuristic]
  --mrsort.weights-profiles-breed.accuracy-heuristic.random-seed INTEGER RANGE
                                  The random seed to use for this heuristic.
                                  
                                  Only valid if:
                                  - '--model-type' is 'mrsort'
                                  - '--mrsort.strategy' is 'weights-profiles-breed'
                                  - '--mrsort.weights-profiles-breed.profiles-strategy' is 'accuracy-heuristic'
                                  
                                     [x>=0]
  --mrsort.weights-profiles-breed.accuracy-heuristic.processor [cpu|gpu]
                                  The processor to use to improve the profiles
                                  of the MRSort models.
                                  
                                  Only valid if:
                                  - '--model-type' is 'mrsort'
                                  - '--mrsort.strategy' is 'weights-profiles-breed'
                                  - '--mrsort.weights-profiles-breed.profiles-strategy' is 'accuracy-heuristic'
                                  
                                     [default: cpu]
  --mrsort.weights-profiles-breed.breed-strategy [reinitialize-least-accurate]
                                  The strategy to use to breed the MRSort
                                  models.
                                  
                                  Only valid if:
                                  - '--model-type' is 'mrsort'
                                  - '--mrsort.strategy' is 'weights-profiles-breed'
                                  
                                     [default: reinitialize-least-accurate]
  --mrsort.weights-profiles-breed.reinitialize-least-accurate.portion FLOAT RANGE
                                  The portion of the least accurate MRSort
                                  models to reinitialize.
                                  
                                  Only valid if:
                                  - '--model-type' is 'mrsort'
                                  - '--mrsort.strategy' is 'weights-profiles-breed'
                                  - '--mrsort.weights-profiles-breed.breed-strategy' is 'reinitialize-least-accurate'
                                  
                                     [default: 0.5; 0.0<=x<=1.0]
  --mrsort.weights-profiles-breed.verbose
                                  Print information about the learning process
                                  on stderr while learning.
                                  
                                  Only valid if:
                                  - '--model-type' is 'mrsort'
                                  - '--mrsort.strategy' is 'weights-profiles-breed'
                                  
  --help                          Show this message and exit.

lincs classify
==============

Usage: lincs classify [OPTIONS] PROBLEM MODEL ALTERNATIVES

  Classify alternatives.

  PROBLEM is a *classification problem* file. MODEL is a *classification
  model* file for that problem. ALTERNATIVES is an *unclassified alternatives*
  file for that problem.

Options:
  --output-classified-alternatives FILENAME
                                  Write classified alternatives to this file
                                  instead of standard output.
  --help                          Show this message and exit.

lincs classification-accuracy
=============================

Usage: lincs classification-accuracy [OPTIONS] PROBLEM MODEL TESTING_SET

  Compute a classification accuracy.

  PROBLEM is a *classification problem* file. MODEL is a *classification
  model* file for that problem. TESTING_SET is a *classified alternatives*
  file for that problem.

  The classification accuracy is written to standard output as an integer
  between 0 and the number of alternatives.

Options:
  --help  Show this message and exit.

lincs: module
-------------

lincs.Alternative: class
------------------------

lincs.Alternative.__init__: function
------------------------------------

__init__( (object)arg1, (str)name, (floats_vector)profile [, (object)category=None]) -> None :

    C++ signature :
        void __init__(_object*,std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >,std::vector<float, std::allocator<float> > [,std::optional<unsigned int>=None])

lincs.Alternative.category_index: property
------------------------------------------

lincs.Alternative.name: property
--------------------------------

lincs.Alternative.profile: property
-----------------------------------

lincs.Alternatives: class
-------------------------

lincs.Alternatives.__init__: function
-------------------------------------

__init__( (object)arg1, (Problem)arg2, (alternatives_vector)arg3) -> None :

    C++ signature :
        void __init__(_object*,lincs::Problem,std::vector<lincs::Alternative, std::allocator<lincs::Alternative> >)

lincs.Alternatives.alternatives: property
-----------------------------------------

lincs.Alternatives.dump: function
---------------------------------

dump( (Alternatives)self, (Problem)problem, (object)out) -> None :
    Dump the set of alternatives to the provided `.write()`-supporting file-like object, in CSV format.

    C++ signature :
        void dump(lincs::Alternatives,lincs::Problem,boost::python::api::object {lvalue})

lincs.Alternatives.load: function
---------------------------------

load( (Problem)problem, (object)in) -> Alternatives :
    Load a set of alternatives (classified or not) from the provided `.read()`-supporting file-like object, in CSV format.

    C++ signature :
        lincs::Alternatives load(lincs::Problem,boost::python::api::object {lvalue})

lincs.BalancedAlternativesGenerationException: type
---------------------------------------------------

lincs.BalancedAlternativesGenerationException.__init__: wrapper_descriptor
--------------------------------------------------------------------------
Initialize self.  See help(type(self)) for accurate signature.

lincs.BalancedAlternativesGenerationException.args: getset_descriptor
---------------------------------------------------------------------

lincs.BalancedAlternativesGenerationException.args.__init__: method-wrapper
---------------------------------------------------------------------------
Initialize self.  See help(type(self)) for accurate signature.

lincs.BalancedAlternativesGenerationException.with_traceback: method_descriptor
-------------------------------------------------------------------------------
Exception.with_traceback(tb) --
    set self.__traceback__ to tb and return self.

lincs.BalancedAlternativesGenerationException.with_traceback.__init__: method-wrapper
-------------------------------------------------------------------------------------
Initialize self.  See help(type(self)) for accurate signature.

lincs.Category: class
---------------------

lincs.Category.__init__: function
---------------------------------

__init__( (object)arg1, (str)arg2) -> None :

    C++ signature :
        void __init__(_object*,std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >)

lincs.Category.name: property
-----------------------------

lincs.Criterion: class
----------------------

lincs.Criterion.CategoryCorrelation: type
-----------------------------------------

lincs.Criterion.CategoryCorrelation.growing: value
--------------------------------------------------
lincs.Criterion.CategoryCorrelation.decreasing: value
-----------------------------------------------------
lincs.Criterion.ValueType: type
-------------------------------

lincs.Criterion.ValueType.real: value
-------------------------------------
lincs.Criterion.__init__: function
----------------------------------

__init__( (object)arg1, (str)arg2, (ValueType)arg3, (CategoryCorrelation)arg4, (float)arg5, (float)arg6) -> None :

    C++ signature :
        void __init__(_object*,std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >,lincs::Criterion::ValueType,lincs::Criterion::CategoryCorrelation,float,float)

lincs.Criterion.category_correlation: property
----------------------------------------------

lincs.Criterion.name: property
------------------------------

lincs.Criterion.value_type: property
------------------------------------

lincs.ImproveProfilesWithAccuracyHeuristicOnCpu: class
------------------------------------------------------

lincs.ImproveProfilesWithAccuracyHeuristicOnCpu.__init__: function
------------------------------------------------------------------

__init__( (object)arg1, (LearningData)arg2) -> None :

    C++ signature :
        void __init__(_object*,lincs::LearnMrsortByWeightsProfilesBreed::LearningData {lvalue})

lincs.ImproveProfilesWithAccuracyHeuristicOnCpu.improve_profiles: function
--------------------------------------------------------------------------

improve_profiles( (ImproveProfilesWithAccuracyHeuristicOnCpu)arg1) -> None :

    C++ signature :
        void improve_profiles(lincs::ImproveProfilesWithAccuracyHeuristicOnCpu {lvalue})

lincs.ImproveProfilesWithAccuracyHeuristicOnGpu: class
------------------------------------------------------

lincs.ImproveProfilesWithAccuracyHeuristicOnGpu.__init__: function
------------------------------------------------------------------

__init__( (object)arg1, (LearningData)arg2) -> None :

    C++ signature :
        void __init__(_object*,lincs::LearnMrsortByWeightsProfilesBreed::LearningData {lvalue})

lincs.ImproveProfilesWithAccuracyHeuristicOnGpu.improve_profiles: function
--------------------------------------------------------------------------

improve_profiles( (ImproveProfilesWithAccuracyHeuristicOnGpu)arg1) -> None :

    C++ signature :
        void improve_profiles(lincs::ImproveProfilesWithAccuracyHeuristicOnGpu {lvalue})

lincs.InitializeProfilesForProbabilisticMaximalDiscriminationPowerPerCriterion: class
-------------------------------------------------------------------------------------

lincs.InitializeProfilesForProbabilisticMaximalDiscriminationPowerPerCriterion.__init__: function
-------------------------------------------------------------------------------------------------

__init__( (object)arg1, (LearningData)arg2) -> None :

    C++ signature :
        void __init__(_object*,lincs::LearnMrsortByWeightsProfilesBreed::LearningData {lvalue})

lincs.InitializeProfilesForProbabilisticMaximalDiscriminationPowerPerCriterion.initialize_profiles: function
------------------------------------------------------------------------------------------------------------

initialize_profiles( (InitializeProfilesForProbabilisticMaximalDiscriminationPowerPerCriterion)arg1, (int)arg2, (int)arg3) -> None :

    C++ signature :
        void initialize_profiles(lincs::InitializeProfilesForProbabilisticMaximalDiscriminationPowerPerCriterion {lvalue},unsigned int,unsigned int)

lincs.LearnMrsortByWeightsProfilesBreed: class
----------------------------------------------

lincs.LearnMrsortByWeightsProfilesBreed.BreedingStrategy: class
---------------------------------------------------------------

lincs.LearnMrsortByWeightsProfilesBreed.BreedingStrategy.__init__: function
---------------------------------------------------------------------------

__init__( (object)arg1) -> None :

    C++ signature :
        void __init__(_object*)

lincs.LearnMrsortByWeightsProfilesBreed.BreedingStrategy.breed: function
------------------------------------------------------------------------

breed( (BreedingStrategy)arg1) -> None :

    C++ signature :
        void breed(lincs::LearnMrsortByWeightsProfilesBreed::BreedingStrategy {lvalue})

breed( (BreedingStrategy)arg1) -> None :

    C++ signature :
        void breed(init_module_liblincs()::BreedingStrategyWrap {lvalue})

lincs.LearnMrsortByWeightsProfilesBreed.LearningData: class
-----------------------------------------------------------

lincs.LearnMrsortByWeightsProfilesBreed.LearningData.__init__: builtin_function_or_method
-----------------------------------------------------------------------------------------
Raises an exception
This class cannot be instantiated from Python


lincs.LearnMrsortByWeightsProfilesBreed.LearningData.get_best_accuracy: function
--------------------------------------------------------------------------------

get_best_accuracy( (LearningData)arg1) -> int :

    C++ signature :
        unsigned int get_best_accuracy(lincs::LearnMrsortByWeightsProfilesBreed::LearningData {lvalue})

lincs.LearnMrsortByWeightsProfilesBreed.LearningData.iteration_index: property
------------------------------------------------------------------------------

lincs.LearnMrsortByWeightsProfilesBreed.LearningData.make: function
-------------------------------------------------------------------

make( (Problem)arg1, (Alternatives)arg2, (int)arg3, (int)arg4) -> LearningData :

    C++ signature :
        lincs::LearnMrsortByWeightsProfilesBreed::LearningData* make(lincs::Problem,lincs::Alternatives,unsigned int,unsigned int)

lincs.LearnMrsortByWeightsProfilesBreed.Observer: class
-------------------------------------------------------

lincs.LearnMrsortByWeightsProfilesBreed.Observer.__init__: function
-------------------------------------------------------------------

__init__( (object)arg1) -> None :

    C++ signature :
        void __init__(_object*)

lincs.LearnMrsortByWeightsProfilesBreed.Observer.after_iteration: function
--------------------------------------------------------------------------

after_iteration( (Observer)arg1) -> None :

    C++ signature :
        void after_iteration(lincs::LearnMrsortByWeightsProfilesBreed::Observer {lvalue})

after_iteration( (Observer)arg1) -> None :

    C++ signature :
        void after_iteration(init_module_liblincs()::ObserverWrap {lvalue})

lincs.LearnMrsortByWeightsProfilesBreed.Observer.before_return: function
------------------------------------------------------------------------

before_return( (Observer)arg1) -> None :

    C++ signature :
        void before_return(lincs::LearnMrsortByWeightsProfilesBreed::Observer {lvalue})

before_return( (Observer)arg1) -> None :

    C++ signature :
        void before_return(init_module_liblincs()::ObserverWrap {lvalue})

lincs.LearnMrsortByWeightsProfilesBreed.ProfilesImprovementStrategy: class
--------------------------------------------------------------------------

lincs.LearnMrsortByWeightsProfilesBreed.ProfilesImprovementStrategy.__init__: function
--------------------------------------------------------------------------------------

__init__( (object)arg1) -> None :

    C++ signature :
        void __init__(_object*)

lincs.LearnMrsortByWeightsProfilesBreed.ProfilesImprovementStrategy.improve_profiles: function
----------------------------------------------------------------------------------------------

improve_profiles( (ProfilesImprovementStrategy)arg1) -> None :

    C++ signature :
        void improve_profiles(lincs::LearnMrsortByWeightsProfilesBreed::ProfilesImprovementStrategy {lvalue})

improve_profiles( (ProfilesImprovementStrategy)arg1) -> None :

    C++ signature :
        void improve_profiles(init_module_liblincs()::ProfilesImprovementStrategyWrap {lvalue})

lincs.LearnMrsortByWeightsProfilesBreed.ProfilesInitializationStrategy: class
-----------------------------------------------------------------------------

lincs.LearnMrsortByWeightsProfilesBreed.ProfilesInitializationStrategy.__init__: function
-----------------------------------------------------------------------------------------

__init__( (object)arg1) -> None :

    C++ signature :
        void __init__(_object*)

lincs.LearnMrsortByWeightsProfilesBreed.ProfilesInitializationStrategy.initialize_profiles: function
----------------------------------------------------------------------------------------------------

initialize_profiles( (ProfilesInitializationStrategy)arg1, (int)arg2, (int)arg3) -> None :

    C++ signature :
        void initialize_profiles(lincs::LearnMrsortByWeightsProfilesBreed::ProfilesInitializationStrategy {lvalue},unsigned int,unsigned int)

initialize_profiles( (ProfilesInitializationStrategy)arg1, (int)arg2, (int)arg3) -> None :

    C++ signature :
        void initialize_profiles(init_module_liblincs()::ProfilesInitializationStrategyWrap {lvalue},unsigned int,unsigned int)

lincs.LearnMrsortByWeightsProfilesBreed.TerminationStrategy: class
------------------------------------------------------------------

lincs.LearnMrsortByWeightsProfilesBreed.TerminationStrategy.__init__: function
------------------------------------------------------------------------------

__init__( (object)arg1) -> None :

    C++ signature :
        void __init__(_object*)

lincs.LearnMrsortByWeightsProfilesBreed.TerminationStrategy.terminate: function
-------------------------------------------------------------------------------

terminate( (TerminationStrategy)arg1) -> bool :

    C++ signature :
        bool terminate(lincs::LearnMrsortByWeightsProfilesBreed::TerminationStrategy {lvalue})

terminate( (TerminationStrategy)arg1) -> None :

    C++ signature :
        void terminate(init_module_liblincs()::TerminationStrategyWrap {lvalue})

lincs.LearnMrsortByWeightsProfilesBreed.WeightsOptimizationStrategy: class
--------------------------------------------------------------------------

lincs.LearnMrsortByWeightsProfilesBreed.WeightsOptimizationStrategy.__init__: function
--------------------------------------------------------------------------------------

__init__( (object)arg1) -> None :

    C++ signature :
        void __init__(_object*)

lincs.LearnMrsortByWeightsProfilesBreed.WeightsOptimizationStrategy.optimize_weights: function
----------------------------------------------------------------------------------------------

optimize_weights( (WeightsOptimizationStrategy)arg1) -> None :

    C++ signature :
        void optimize_weights(lincs::LearnMrsortByWeightsProfilesBreed::WeightsOptimizationStrategy {lvalue})

optimize_weights( (WeightsOptimizationStrategy)arg1) -> None :

    C++ signature :
        void optimize_weights(init_module_liblincs()::WeightsOptimizationStrategyWrap {lvalue})

lincs.LearnMrsortByWeightsProfilesBreed.__init__: function
----------------------------------------------------------

__init__( (object)arg1, (LearningData)learning_data, (ProfilesInitializationStrategy)profiles_initialization_strategy, (WeightsOptimizationStrategy)weights_optimization_strategy, (ProfilesImprovementStrategy)profiles_improvement_strategy, (BreedingStrategy)breeding_strategy, (TerminationStrategy)termination_strategy) -> None :

    C++ signature :
        void __init__(_object*,lincs::LearnMrsortByWeightsProfilesBreed::LearningData {lvalue},lincs::LearnMrsortByWeightsProfilesBreed::ProfilesInitializationStrategy {lvalue},lincs::LearnMrsortByWeightsProfilesBreed::WeightsOptimizationStrategy {lvalue},lincs::LearnMrsortByWeightsProfilesBreed::ProfilesImprovementStrategy {lvalue},lincs::LearnMrsortByWeightsProfilesBreed::BreedingStrategy {lvalue},lincs::LearnMrsortByWeightsProfilesBreed::TerminationStrategy {lvalue})

__init__( (object)arg1, (LearningData)learning_data, (ProfilesInitializationStrategy)profiles_initialization_strategy, (WeightsOptimizationStrategy)weights_optimization_strategy, (ProfilesImprovementStrategy)profiles_improvement_strategy, (BreedingStrategy)breeding_strategy, (TerminationStrategy)termination_strategy, (object)observers) -> None :

    C++ signature :
        void __init__(_object*,lincs::LearnMrsortByWeightsProfilesBreed::LearningData {lvalue},lincs::LearnMrsortByWeightsProfilesBreed::ProfilesInitializationStrategy {lvalue},lincs::LearnMrsortByWeightsProfilesBreed::WeightsOptimizationStrategy {lvalue},lincs::LearnMrsortByWeightsProfilesBreed::ProfilesImprovementStrategy {lvalue},lincs::LearnMrsortByWeightsProfilesBreed::BreedingStrategy {lvalue},lincs::LearnMrsortByWeightsProfilesBreed::TerminationStrategy {lvalue},std::vector<lincs::LearnMrsortByWeightsProfilesBreed::Observer*, std::allocator<lincs::LearnMrsortByWeightsProfilesBreed::Observer*> >)

lincs.LearnMrsortByWeightsProfilesBreed.perform: function
---------------------------------------------------------

perform( (LearnMrsortByWeightsProfilesBreed)arg1) -> Model :

    C++ signature :
        lincs::Model perform(lincs::LearnMrsortByWeightsProfilesBreed {lvalue})

lincs.LearnUcncsByMaxSatByCoalitionsUsingEvalmaxsat: class
----------------------------------------------------------

lincs.LearnUcncsByMaxSatByCoalitionsUsingEvalmaxsat.__init__: function
----------------------------------------------------------------------

__init__( (object)arg1, (Problem)arg2, (Alternatives)arg3) -> None :

    C++ signature :
        void __init__(_object*,lincs::Problem,lincs::Alternatives)

lincs.LearnUcncsByMaxSatByCoalitionsUsingEvalmaxsat.perform: function
---------------------------------------------------------------------

perform( (LearnUcncsByMaxSatByCoalitionsUsingEvalmaxsat)arg1) -> Model :

    C++ signature :
        lincs::Model perform(lincs::MaxSatCoalitionsUcncsLearning<lincs::EvalmaxsatMaxSatProblem> {lvalue})

lincs.LearnUcncsByMaxSatBySeparationUsingEvalmaxsat: class
----------------------------------------------------------

lincs.LearnUcncsByMaxSatBySeparationUsingEvalmaxsat.__init__: function
----------------------------------------------------------------------

__init__( (object)arg1, (Problem)arg2, (Alternatives)arg3) -> None :

    C++ signature :
        void __init__(_object*,lincs::Problem,lincs::Alternatives)

lincs.LearnUcncsByMaxSatBySeparationUsingEvalmaxsat.perform: function
---------------------------------------------------------------------

perform( (LearnUcncsByMaxSatBySeparationUsingEvalmaxsat)arg1) -> Model :

    C++ signature :
        lincs::Model perform(lincs::MaxSatSeparationUcncsLearning<lincs::EvalmaxsatMaxSatProblem> {lvalue})

lincs.LearnUcncsBySatByCoalitionsUsingMinisat: class
----------------------------------------------------

lincs.LearnUcncsBySatByCoalitionsUsingMinisat.__init__: function
----------------------------------------------------------------

__init__( (object)arg1, (Problem)arg2, (Alternatives)arg3) -> None :

    C++ signature :
        void __init__(_object*,lincs::Problem,lincs::Alternatives)

lincs.LearnUcncsBySatByCoalitionsUsingMinisat.perform: function
---------------------------------------------------------------

perform( (LearnUcncsBySatByCoalitionsUsingMinisat)arg1) -> Model :

    C++ signature :
        lincs::Model perform(lincs::SatCoalitionsUcncsLearning<lincs::MinisatSatProblem> {lvalue})

lincs.LearnUcncsBySatBySeparationUsingMinisat: class
----------------------------------------------------

lincs.LearnUcncsBySatBySeparationUsingMinisat.__init__: function
----------------------------------------------------------------

__init__( (object)arg1, (Problem)arg2, (Alternatives)arg3) -> None :

    C++ signature :
        void __init__(_object*,lincs::Problem,lincs::Alternatives)

lincs.LearnUcncsBySatBySeparationUsingMinisat.perform: function
---------------------------------------------------------------

perform( (LearnUcncsBySatBySeparationUsingMinisat)arg1) -> Model :

    C++ signature :
        lincs::Model perform(lincs::SatSeparationUcncsLearning<lincs::MinisatSatProblem> {lvalue})

lincs.LearningFailureException: type
------------------------------------

lincs.LearningFailureException.__init__: wrapper_descriptor
-----------------------------------------------------------
Initialize self.  See help(type(self)) for accurate signature.

lincs.LearningFailureException.args: getset_descriptor
------------------------------------------------------

lincs.LearningFailureException.args.__init__: method-wrapper
------------------------------------------------------------
Initialize self.  See help(type(self)) for accurate signature.

lincs.LearningFailureException.with_traceback: method_descriptor
----------------------------------------------------------------
Exception.with_traceback(tb) --
    set self.__traceback__ to tb and return self.

lincs.LearningFailureException.with_traceback.__init__: method-wrapper
----------------------------------------------------------------------
Initialize self.  See help(type(self)) for accurate signature.

lincs.Model: class
------------------

lincs.Model.Boundary: class
---------------------------

lincs.Model.Boundary.__init__: function
---------------------------------------

__init__( (object)arg1, (floats_vector)arg2, (SufficientCoalitions)arg3) -> None :

    C++ signature :
        void __init__(_object*,std::vector<float, std::allocator<float> >,lincs::SufficientCoalitions)

lincs.Model.Boundary.profile: property
--------------------------------------

lincs.Model.Boundary.sufficient_coalitions: property
----------------------------------------------------

lincs.Model.JSON_SCHEMA: str
----------------------------

lincs.Model.__init__: function
------------------------------

__init__( (object)arg1, (Problem)arg2, (boundaries_vector)arg3) -> None :

    C++ signature :
        void __init__(_object*,lincs::Problem,std::vector<lincs::Model::Boundary, std::allocator<lincs::Model::Boundary> >)

lincs.Model.boundaries: property
--------------------------------

lincs.Model.dump: function
--------------------------

dump( (Model)self, (Problem)problem, (object)out) -> None :
    Dump the model to the provided `.write()`-supporting file-like object, in YAML format.

    C++ signature :
        void dump(lincs::Model,lincs::Problem,boost::python::api::object {lvalue})

lincs.Model.load: function
--------------------------

load( (Problem)problem, (object)in) -> Model :
    Load a model for the provided `problem`, from the provided `.read()`-supporting file-like object, in YAML format.

    C++ signature :
        lincs::Model load(lincs::Problem,boost::python::api::object {lvalue})

lincs.OptimizeWeightsUsingAlglib: class
---------------------------------------

lincs.OptimizeWeightsUsingAlglib.__init__: function
---------------------------------------------------

__init__( (object)arg1, (LearningData)arg2) -> None :

    C++ signature :
        void __init__(_object*,lincs::LearnMrsortByWeightsProfilesBreed::LearningData {lvalue})

lincs.OptimizeWeightsUsingAlglib.optimize_weights: function
-----------------------------------------------------------

optimize_weights( (OptimizeWeightsUsingAlglib)arg1) -> None :

    C++ signature :
        void optimize_weights(lincs::OptimizeWeightsUsingLinearProgram<lincs::AlglibLinearProgram> {lvalue})

lincs.OptimizeWeightsUsingGlop: class
-------------------------------------

lincs.OptimizeWeightsUsingGlop.__init__: function
-------------------------------------------------

__init__( (object)arg1, (LearningData)arg2) -> None :

    C++ signature :
        void __init__(_object*,lincs::LearnMrsortByWeightsProfilesBreed::LearningData {lvalue})

lincs.OptimizeWeightsUsingGlop.optimize_weights: function
---------------------------------------------------------

optimize_weights( (OptimizeWeightsUsingGlop)arg1) -> None :

    C++ signature :
        void optimize_weights(lincs::OptimizeWeightsUsingLinearProgram<lincs::GlopLinearProgram> {lvalue})

lincs.Problem: class
--------------------

lincs.Problem.JSON_SCHEMA: str
------------------------------

lincs.Problem.__init__: function
--------------------------------

__init__( (object)arg1, (criteria_vector)arg2, (categories_vector)arg3) -> None :

    C++ signature :
        void __init__(_object*,std::vector<lincs::Criterion, std::allocator<lincs::Criterion> >,std::vector<lincs::Category, std::allocator<lincs::Category> >)

lincs.Problem.categories: property
----------------------------------

lincs.Problem.criteria: property
--------------------------------

lincs.Problem.dump: function
----------------------------

dump( (Problem)self, (object)out) -> None :
    Dump the problem to the provided `.write()`-supporting file-like object, in YAML format.

    C++ signature :
        void dump(lincs::Problem,boost::python::api::object {lvalue})

lincs.Problem.load: function
----------------------------

load( (object)in) -> Problem :
    Load a problem from the provided `.read()`-supporting file-like object, in YAML format.

    C++ signature :
        lincs::Problem load(boost::python::api::object {lvalue})

lincs.ReinitializeLeastAccurate: class
--------------------------------------

lincs.ReinitializeLeastAccurate.__init__: function
--------------------------------------------------

__init__( (object)arg1, (LearningData)arg2, (ProfilesInitializationStrategy)arg3, (int)arg4) -> None :

    C++ signature :
        void __init__(_object*,lincs::LearnMrsortByWeightsProfilesBreed::LearningData {lvalue},lincs::LearnMrsortByWeightsProfilesBreed::ProfilesInitializationStrategy {lvalue},unsigned int)

lincs.ReinitializeLeastAccurate.breed: function
-----------------------------------------------

breed( (ReinitializeLeastAccurate)arg1) -> None :

    C++ signature :
        void breed(lincs::ReinitializeLeastAccurate {lvalue})

lincs.SufficientCoalitions: class
---------------------------------

lincs.SufficientCoalitions.Kind: type
-------------------------------------

lincs.SufficientCoalitions.Kind.weights: value
----------------------------------------------
lincs.SufficientCoalitions.Kind.roots: value
--------------------------------------------
lincs.SufficientCoalitions.__init__: function
---------------------------------------------

__init__( (object)arg1, (Weights)arg2, (floats_vector)arg3) -> None :

    C++ signature :
        void __init__(_object*,lincs::SufficientCoalitions::Weights,std::vector<float, std::allocator<float> >)

__init__( (object)arg1, (Roots)arg2, (int)arg3, (object)arg4) -> None :

    C++ signature :
        void __init__(_object*,lincs::SufficientCoalitions::Roots,unsigned int,std::vector<std::vector<unsigned int, std::allocator<unsigned int> >, std::allocator<std::vector<unsigned int, std::allocator<unsigned int> > > >)

lincs.SufficientCoalitions.criterion_weights: property
------------------------------------------------------

lincs.SufficientCoalitions.kind: property
-----------------------------------------

lincs.SufficientCoalitions.roots: Roots
---------------------------------------

lincs.SufficientCoalitions.roots.__init__: builtin_function_or_method
---------------------------------------------------------------------
Raises an exception
This class cannot be instantiated from Python


lincs.SufficientCoalitions.upset_roots: property
------------------------------------------------

lincs.SufficientCoalitions.weights: Weights
-------------------------------------------

lincs.SufficientCoalitions.weights.__init__: builtin_function_or_method
-----------------------------------------------------------------------
Raises an exception
This class cannot be instantiated from Python


lincs.TerminateAfterIterations: class
-------------------------------------

lincs.TerminateAfterIterations.__init__: function
-------------------------------------------------

__init__( (object)arg1, (LearningData)arg2, (int)arg3) -> None :

    C++ signature :
        void __init__(_object*,lincs::LearnMrsortByWeightsProfilesBreed::LearningData {lvalue},unsigned int)

lincs.TerminateAfterIterations.terminate: function
--------------------------------------------------

terminate( (TerminateAfterIterations)arg1) -> bool :

    C++ signature :
        bool terminate(lincs::TerminateAfterIterations {lvalue})

lincs.TerminateAfterIterationsWithoutProgress: class
----------------------------------------------------

lincs.TerminateAfterIterationsWithoutProgress.__init__: function
----------------------------------------------------------------

__init__( (object)arg1, (LearningData)arg2, (int)arg3) -> None :

    C++ signature :
        void __init__(_object*,lincs::LearnMrsortByWeightsProfilesBreed::LearningData {lvalue},unsigned int)

lincs.TerminateAfterIterationsWithoutProgress.terminate: function
-----------------------------------------------------------------

terminate( (TerminateAfterIterationsWithoutProgress)arg1) -> bool :

    C++ signature :
        bool terminate(lincs::TerminateAfterIterationsWithoutProgress {lvalue})

lincs.TerminateAfterSeconds: class
----------------------------------

lincs.TerminateAfterSeconds.__init__: function
----------------------------------------------

__init__( (object)arg1, (float)arg2) -> None :

    C++ signature :
        void __init__(_object*,float)

lincs.TerminateAfterSeconds.terminate: function
-----------------------------------------------

terminate( (TerminateAfterSeconds)arg1) -> bool :

    C++ signature :
        bool terminate(lincs::TerminateAfterSeconds {lvalue})

lincs.TerminateAfterSecondsWithoutProgress: class
-------------------------------------------------

lincs.TerminateAfterSecondsWithoutProgress.__init__: function
-------------------------------------------------------------

__init__( (object)arg1, (LearningData)arg2, (float)arg3) -> None :

    C++ signature :
        void __init__(_object*,lincs::LearnMrsortByWeightsProfilesBreed::LearningData {lvalue},float)

lincs.TerminateAfterSecondsWithoutProgress.terminate: function
--------------------------------------------------------------

terminate( (TerminateAfterSecondsWithoutProgress)arg1) -> bool :

    C++ signature :
        bool terminate(lincs::TerminateAfterSecondsWithoutProgress {lvalue})

lincs.TerminateAtAccuracy: class
--------------------------------

lincs.TerminateAtAccuracy.__init__: function
--------------------------------------------

__init__( (object)arg1, (LearningData)arg2, (int)arg3) -> None :

    C++ signature :
        void __init__(_object*,lincs::LearnMrsortByWeightsProfilesBreed::LearningData {lvalue},unsigned int)

lincs.TerminateAtAccuracy.terminate: function
---------------------------------------------

terminate( (TerminateAtAccuracy)arg1) -> bool :

    C++ signature :
        bool terminate(lincs::TerminateAtAccuracy {lvalue})

lincs.TerminateWhenAny: class
-----------------------------

lincs.TerminateWhenAny.__init__: function
-----------------------------------------

__init__( (object)arg1, (object)arg2) -> None :

    C++ signature :
        void __init__(_object*,std::vector<lincs::LearnMrsortByWeightsProfilesBreed::TerminationStrategy*, std::allocator<lincs::LearnMrsortByWeightsProfilesBreed::TerminationStrategy*> >)

lincs.TerminateWhenAny.terminate: function
------------------------------------------

terminate( (TerminateWhenAny)arg1) -> bool :

    C++ signature :
        bool terminate(lincs::TerminateWhenAny {lvalue})

lincs.classify_alternatives: function
-------------------------------------

classify_alternatives( (Problem)problem, (Model)model, (Alternatives)alternatives) -> ClassificationResult :
    Classify the provided `alternatives` according to the provided `model`.

    C++ signature :
        lincs::ClassificationResult classify_alternatives(lincs::Problem,lincs::Model,lincs::Alternatives*)

lincs.generate_classification_problem: function
-----------------------------------------------

generate_classification_problem( (int)criteria_count, (int)categories_count, (int)random_seed [, (bool)normalized_min_max=True [, (bool)allow_decreasing_criteria=False]]) -> Problem :
    Generate a problem with `criteria_count` criteria and `categories_count` categories.

    C++ signature :
        lincs::Problem generate_classification_problem(unsigned int,unsigned int,unsigned int [,bool=True [,bool=False]])

lincs.generate_classified_alternatives: function
------------------------------------------------

generate_classified_alternatives( (Problem)problem, (Model)model, (int)alternatives_count, (int)random_seed [, (object)max_imbalance=None]) -> Alternatives :
    Generate a set of `alternatives_count` pseudo-random alternatives for the provided `problem`, classified according to the provided `model`.

    C++ signature :
        lincs::Alternatives generate_classified_alternatives(lincs::Problem,lincs::Model,unsigned int,unsigned int [,std::optional<float>=None])

lincs.generate_mrsort_classification_model: function
----------------------------------------------------

generate_mrsort_classification_model( (Problem)problem, (int)random_seed [, (object)fixed_weights_sum=None]) -> Model :
    Generate an MR-Sort model for the provided `problem`.

    C++ signature :
        lincs::Model generate_mrsort_classification_model(lincs::Problem,unsigned int [,std::optional<float>=None])

lincs.has_gpu: bool
-------------------

lincs.misclassify_alternatives: function
----------------------------------------

misclassify_alternatives( (Problem)problem, (Alternatives)alternatives, (int)count, (int)random_seed) -> None :
    Misclassify `count` alternatives from the provided `alternatives`.

    C++ signature :
        void misclassify_alternatives(lincs::Problem,lincs::Alternatives*,unsigned int,unsigned int)

lincs.visualization: module
---------------------------

lincs.visualization.visualize_model: function
---------------------------------------------

