lincs
=====

Usage: lincs [OPTIONS] COMMAND [ARGS]...

  lincs (Learn and Infer Non-Compensatory Sorting) is a set of tools for
  training and using MCDA models.

Options:
  --help  Show this message and exit.

Commands:
  classification-accuracy  Compute a classification accuracy.
  classify                 Classify alternatives.
  generate                 Generate synthetic data.
  visualize

lincs generate
==============

Usage: lincs generate [OPTIONS] COMMAND [ARGS]...

  Generate synthetic data.

Options:
  --help  Show this message and exit.

Commands:
  classification-domain    Generate a synthetic classification domain.
  classification-model     Generate a synthetic classification model.
  classified-alternatives  Generate synthetic classified alternatives.

lincs generate classification-domain
====================================

Usage: lincs generate classification-domain [OPTIONS] CRITERIA_COUNT
                                            CATEGORIES_COUNT

  Generate a synthetic classification domain.

  The generated domain has CRITERIA_COUNT criteria and CATEGORIES_COUNT
  categories.

Options:
  --output-domain FILENAME     Write generated domain to this file instead of
                               standard output.
  --random-seed INTEGER RANGE  The random seed to use.  [x>=0]
  --help                       Show this message and exit.

lincs generate classification-model
===================================

Usage: lincs generate classification-model [OPTIONS] DOMAIN

  Generate a synthetic classification model.

  DOMAIN is a *classification domain* file describing the domain to generate a
  model for.

Options:
  --output-model FILENAME         Write generated model to this file instead
                                  of standard output.
  --random-seed INTEGER RANGE     The random seed to use.  [x>=0]
  --model-type [mrsort]           The type of classification model to
                                  generate.  [default: mrsort]
  --mrsort.fixed-weights-sum FLOAT RANGE
                                  Make sure weights add up to this pre-
                                  determined value instead of a pseudo-random
                                  one.
                                  
                                  Only valid if:
                                   - '--model-type' is 'mrsort'
                                  
                                  *  [x>=1.0]
  --help                          Show this message and exit.

lincs generate classified-alternatives
======================================

Usage: lincs generate classified-alternatives [OPTIONS] DOMAIN MODEL
                                              ALTERNATIVES_COUNT

  Generate synthetic classified alternatives.

  DOMAIN is a *classification domain* file describing the domain to generate
  alternatives for. MODEL is a *classification model* file for that domain
  describing the model to use to classify the generated alternatives.

Options:
  --output-classified-alternatives FILENAME
                                  Write generated classified alternatives to
                                  this file instead of standard output.
  --max-imbalance FLOAT RANGE     Ensure that categories are balanced, by
                                  forcing their size to differ from the
                                  perfectly balanced size by at most this
                                  fraction.  [0.0<=x<1.0]
  --random-seed INTEGER RANGE     The random seed to use.  [x>=0]
  --help                          Show this message and exit.

lincs visualize
===============

Usage: lincs visualize [OPTIONS] COMMAND [ARGS]...

Options:
  --help  Show this message and exit.

Commands:
  model

lincs visualize model
=====================

Usage: lincs visualize model [OPTIONS] DOMAIN MODEL OUTPUT

Options:
  --alternatives FILENAME
  --help                   Show this message and exit.

lincs classify
==============

Usage: lincs classify [OPTIONS] DOMAIN MODEL ALTERNATIVES

  Classify alternatives.

  DOMAIN is a *classification domain* file. MODEL is a *classification model*
  file for that domain. ALTERNATIVES is an *unclassified alternatives* file
  for that domain.

Options:
  --output-classified-alternatives FILENAME
                                  Write classified alternatives to this file
                                  instead of standard output.
  --help                          Show this message and exit.

lincs classification-accuracy
=============================

Usage: lincs classification-accuracy [OPTIONS] DOMAIN MODEL TESTING_SET

  Compute a classification accuracy.

  DOMAIN is a *classification domain* file. MODEL is a *classification model*
  file for that domain. TESTING_SET is a *classified alternatives* file for
  that domain.

  The classification accuracy is written to standard output as an integer
  between 0 and the number of alternatives.

Options:
  --help  Show this message and exit.

lincs.Alternative
=================

category
--------

name
----

profile
-------

lincs.Alternatives
==================

alternatives
------------

dump
----


dump( (Alternatives)self, (object)out) -> None :
    Dump the set of alternatives to the provided `.write()`-supporting file-like object, in CSV format.

    C++ signature :
        void dump(lincs::Alternatives,boost::python::api::object {lvalue})

lincs.Boundary
==============

profile
-------

sufficient_coalitions
---------------------

lincs.Category
==============

name
----

lincs.CategoryCorrelation
=========================

growing
-------

lincs.Criterion
===============

category_correlation
--------------------

name
----

value_type
----------

lincs.Domain
============

categories
----------

criteria
--------

dump
----


dump( (Domain)self, (object)out) -> None :
    Dump the domain to the provided `.write()`-supporting file-like object, in YAML format.

    C++ signature :
        void dump(lincs::Domain,boost::python::api::object {lvalue})

lincs.Model
===========

boundaries
----------

dump
----


dump( (Model)self, (object)out) -> None :
    Dump the model to the provided `.write()`-supporting file-like object, in YAML format.

    C++ signature :
        void dump(lincs::Model,boost::python::api::object {lvalue})

lincs.SufficientCoalitions
==========================

criterion_weights
-----------------

kind
----

lincs.SufficientCoalitionsKind
==============================

weights
-------

lincs.ValueType
===============

real
----

lincs.classify_alternatives
===========================


classify_alternatives( (Domain)domain, (Model)model, (Alternatives)alternatives) -> ClassificationResult :
    Classify the provided `alternatives` according to the provided `model`.

    C++ signature :
        lincs::ClassificationResult classify_alternatives(lincs::Domain,lincs::Model,lincs::Alternatives*)

lincs.command_line_interface
============================

lincs.generate_alternatives
===========================


generate_alternatives( (Domain)domain, (Model)model, (int)alternatives_count, (int)random_seed [, (object)max_imbalance=None]) -> Alternatives :
    Generate a set of `alternatives_count` pseudo-random alternatives for the provided `domain`, classified according to the provided `model`.

    C++ signature :
        lincs::Alternatives generate_alternatives(lincs::Domain,lincs::Model,unsigned int,unsigned int [,std::optional<float>=None])

lincs.generate_domain
=====================


generate_domain( (int)criteria_count, (int)categories_count, (int)random_seed) -> Domain :
    Generate a domain with `criteria_count` criteria and `categories_count` categories.

    C++ signature :
        lincs::Domain generate_domain(unsigned int,unsigned int,unsigned int)

lincs.generate_mrsort_model
===========================


generate_mrsort_model( (Domain)domain, (int)random_seed [, (object)fixed_weights_sum=None]) -> Model :
    Generate an MR-Sort model for the provided `domain`.

    C++ signature :
        lincs::Model generate_mrsort_model(lincs::Domain,unsigned int [,std::optional<float>=None])

lincs.load_alternatives
=======================


load_alternatives( (Domain)domain, (object)in) -> Alternatives :
    Load a set of alternatives (classified or not) from the provided `.read()`-supporting file-like object, in CSV format.

    C++ signature :
        lincs::Alternatives load_alternatives(lincs::Domain,boost::python::api::object {lvalue})

lincs.load_domain
=================


load_domain( (object)in) -> Domain :
    Load a domain from the provided `.read()`-supporting file-like object, in YAML format.

    C++ signature :
        lincs::Domain load_domain(boost::python::api::object {lvalue})

lincs.load_model
================


load_model( (Domain)domain, (object)in) -> Model :
    Load a model for the provided `domain`, from the provided `.read()`-supporting file-like object, in YAML format.

    C++ signature :
        lincs::Model load_model(lincs::Domain,boost::python::api::object {lvalue})

lincs.visualization
===================

